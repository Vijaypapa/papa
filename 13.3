In a .NET Core console application, the main file where your code is written is usually `Program.cs`. However, if you want to better organize your code, you can create additional classes in separate files.

Here’s how you can organize the project:

### 1. **Program.cs**
   This file will contain the `Main` method, which is the entry point of the application. You can keep your `Main` method simple and move other functionalities into different classes. Here's what the `Program.cs` might look like:

```csharp
using System;

namespace FileSplitterApp
{
    class Program
    {
        static void Main(string[] args)
        {
            FileProcessor processor = new FileProcessor();
            processor.ProcessFiles();
        }
    }
}
```

### 2. **FileProcessor.cs**
   Create a new file in the same project called `FileProcessor.cs`. This file will contain all the logic related to file processing.

- In Visual Studio, right-click your project (in Solution Explorer) → Add → Class → Name it `FileProcessor.cs`.

Here’s how you can write the `FileProcessor.cs` file:

```csharp
using System;
using System.IO;
using System.Linq;
using iText.Kernel.Pdf;
using iText.Kernel.Utils;
using System.Text.RegularExpressions;

namespace FileSplitterApp
{
    public class FileProcessor
    {
        public void ProcessFiles()
        {
            string downloadsFolder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + @"\Downloads";
            string inputFolder = Path.Combine(downloadsFolder, "Inputfolder");
            string outputFolder = Path.Combine(downloadsFolder, "Outputfolder");

            // Ensure folders exist
            EnsureFolderExists(inputFolder);
            EnsureFolderExists(outputFolder);

            // Get all files from the input folder
            var files = Directory.GetFiles(inputFolder);
            foreach (var file in files)
            {
                Console.WriteLine($"Processing file: {file}");
                ProcessFile(file, outputFolder);
            }

            Console.WriteLine("Processing completed.");
        }

        private void EnsureFolderExists(string folderPath)
        {
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
                Console.WriteLine($"Created folder: {folderPath}");
            }
            else
            {
                Console.WriteLine($"Folder already exists: {folderPath}");
            }
        }

        private void ProcessFile(string filePath, string outputFolder)
        {
            try
            {
                using (PdfReader reader = new PdfReader(filePath))
                {
                    using (PdfDocument pdfDoc = new PdfDocument(reader))
                    {
                        // Split each page
                        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
                        {
                            PdfDocument singlePagePdf = new PdfDocument(new PdfWriter(Path.Combine(outputFolder, $"tempPage_{i}.pdf")));
                            PdfPage page = pdfDoc.GetPage(i);
                            page.CopyTo(singlePagePdf);
                            singlePagePdf.Close();

                            // Extract invoice number
                            string invoiceNo = ExtractInvoiceNumber(Path.Combine(outputFolder, $"tempPage_{i}.pdf"));
                            if (!string.IsNullOrEmpty(invoiceNo))
                            {
                                string newFileName = Path.Combine(outputFolder, $"Invoice_{invoiceNo}_Page_{i}.pdf");
                                File.Move(Path.Combine(outputFolder, $"tempPage_{i}.pdf"), newFileName);
                                Console.WriteLine($"Renamed to: {newFileName}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing file {filePath}: {ex.Message}");
            }
        }

        private string ExtractInvoiceNumber(string filePath)
        {
            // Simulating the extraction of invoice number
            string pageText = ExtractTextFromPdf(filePath);

            // Regex pattern to find "Invoice No: <number>"
            Regex regex = new Regex(@"Invoice No:\s*(\d+)");
            Match match = regex.Match(pageText);
            if (match.Success)
            {
                return match.Groups[1].Value;
            }

            return null;
        }

        private string ExtractTextFromPdf(string filePath)
        {
            // Simulate PDF text extraction
            return "Invoice No: 12345\nSome other content on the page.";
        }
    }
}
```

### Folder Structure
- **`Program.cs`**: This will contain the `Main` method, where the execution starts.
- **`FileProcessor.cs`**: This file contains the core logic to process files, create directories, and handle file splitting/renaming.

### Steps to Add a New File:
1. Right-click on your project in Visual Studio.
2. Select **Add** → **Class**.
3. Name the new file `FileProcessor.cs` (or any other name you prefer).
4. Copy the `FileProcessor` class code into this file.

Now, your `Program.cs` will simply call methods from the `FileProcessor` class to handle the logic, keeping the code cleaner and more organized.

Let me know if you need further clarification!