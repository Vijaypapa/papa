To create a unique file name using the invoice number followed by an incremental number (e.g., `45765_1.pdf`, `45765_2.pdf`), you can modify the logic to check for existing files and append a counter to the file name.

Hereâ€™s how you can implement this:

### Updated Code with Incremental Unique File Name

```csharp
private void ProcessFile(string filePath, string outputFolder)
{
    try
    {
        // Open the source PDF file
        using (PdfReader reader = new PdfReader(filePath))
        {
            using (PdfDocument pdfDoc = new PdfDocument(reader))
            {
                // Iterate through each page
                for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
                {
                    // Create a new document for each page
                    string tempFilePath = Path.Combine(outputFolder, $"tempPage_{i}.pdf");
                    using (PdfWriter writer = new PdfWriter(tempFilePath))
                    {
                        using (PdfDocument singlePagePdf = new PdfDocument(writer))
                        {
                            // Copy the page to the new document
                            pdfDoc.CopyPagesTo(i, i, singlePagePdf);
                        }
                    }

                    // Extract the invoice number and rename the file
                    string invoiceNo = ExtractInvoiceNumber(tempFilePath);
                    if (!string.IsNullOrEmpty(invoiceNo))
                    {
                        // Set base file name with Invoice Number
                        string baseFileName = Path.Combine(outputFolder, $"Invoice_{invoiceNo}");

                        // Initialize counter for unique naming
                        int counter = 1;
                        string uniqueFileName = $"{baseFileName}_{counter}.pdf";

                        // Increment the counter until a unique file name is found
                        while (File.Exists(uniqueFileName))
                        {
                            counter++;
                            uniqueFileName = $"{baseFileName}_{counter}.pdf";
                        }

                        // Move the temp file to the unique file name
                        File.Move(tempFilePath, uniqueFileName);
                        Console.WriteLine($"File saved as: {uniqueFileName}");
                    }
                }
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error processing file {filePath}: {ex.Message}");
    }
}
```

### How This Works:
1. **Extract Invoice Number**: Extract the numeric value from the text (using your `ExtractInvoiceNumber` function).
2. **Base File Name**: The base file name is `Invoice_<invoiceNo>`.
3. **Unique Name Generation**: 
   - The code starts with `Invoice_<invoiceNo>_1.pdf`.
   - If this file already exists, it increments the counter (`_2`, `_3`, etc.) until a unique file name is found.
4. **Move File**: The temporary file (`tempPage_{i}.pdf`) is renamed to the unique name.

### Example:
If the invoice number is `45765`, the generated file names would be:
- First file: `Invoice_45765_1.pdf`
- Second file: `Invoice_45765_2.pdf`
- Third file: `Invoice_45765_3.pdf`, and so on.

This ensures that no files are overwritten, and all files are kept with unique names. Let me know if this works for your scenario!