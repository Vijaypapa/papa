private void InsertIntoDatabase(string csvFilePath)
{
    try
    {
        if (!File.Exists(csvFilePath))
        {
            LogToErrorFile($"File not found: {csvFilePath}");
            return;
        }

        using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
        {
            connection.Open();

            // Get the current maximum BatchId from the database
            int batchId = GenerateNewBatchId(connection);

            // Query to get the current max row count from the database
            //SqlCommand queryToGetMaxRowS = new SqlCommand("SELECT COUNT(*) FROM OutputFileDetails");
            int currentRowCount = 0;
           
            using (var cmd = new SqlCommand("SELECT COUNT(*) FROM OutputFileDetails", connection))
            {
                currentRowCount = (int)cmd.ExecuteScalar();
            }

            // Skip if already 9749 rows exist
           
                string insertQuery = @"
            INSERT INTO OutputFileDetails (Date, Agent, TimesheetOwner, TotalTalkingTime, Division, CreatedDateTime, BatchId)
            VALUES (@Date, @Agent, @TimesheetOwner, @TotalTalkingTime, @Division, @CreatedDateTime, @BatchId)";

                using (var insertCommand = new SqlCommand(insertQuery, connection))
                {
                    using (var reader = new StreamReader(csvFilePath))
                    {
                        // Skip the first 6 header lines if necessary
                        //for (int i = 0; i < 6; i++)
                        //{
                        //    reader.ReadLine();
                        //}

                        int rowIndex = 9750 ;

                        while (!reader.EndOfStream)
                        {
                            rowIndex++;

                            // Skip rows until the 9750th
                            //if (rowIndex != null)
                            //{
                            //    reader.ReadLine();
                            //    continue;
                            //}

                            var line = reader.ReadLine();
                            var values = line.Split(',');

                            if (values.Length < 8)
                            {
                                LogToErrorFile($"Skipping line due to insufficient values: {line}");
                                continue;
                            }

                            var agentExtensionWithOwner = values[0].Trim('"');
                            var timesheetOwner = values[1].Trim('"');
                            var totalTalkingTime = values[values.Length - 1].Trim();

                            var parts = agentExtensionWithOwner.Split(' ', 2);
                            if (parts.Length < 2)
                            {
                                LogToErrorFile($"Skipping line due to invalid agentExtensionWithOwner format: {line}");
                                continue;
                            }

                            var agentExtension = parts[0].Trim();
                            var divisionValue = parts[1].Trim('"');

                            if (!string.IsNullOrEmpty(agentExtension))
                            {
                                insertCommand.Parameters.Clear();
                                insertCommand.Parameters.AddWithValue("@Date", DateTime.Today);
                                insertCommand.Parameters.AddWithValue("@Agent", agentExtension);
                                insertCommand.Parameters.AddWithValue("@TimesheetOwner", timesheetOwner);
                                insertCommand.Parameters.AddWithValue("@TotalTalkingTime", totalTalkingTime);
                                insertCommand.Parameters.AddWithValue("@Division", divisionValue);
                                insertCommand.Parameters.AddWithValue("@CreatedDateTime", DateTime.Now);
                                insertCommand.Parameters.AddWithValue("@BatchId", batchId);

                                insertCommand.ExecuteNonQuery();
                            }
                            else
                            {
                                LogToErrorFile($"Skipping line due to empty agentExtension or timesheetOwner: {line}");
                            }
                        }
                    }
                }
           
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile($"General Exception: {ex.Message}");
        StartConsoleWriting(ex.Message);
    }
}

its not creating any new records in salesforce file which we are getting from bot run output file.
getting older 9749 rows records only
