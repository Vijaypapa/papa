using Microsoft.Graph;
using Microsoft.Identity.Client;
using Microsoft.IdentityModel.Protocols;
using Microsoft.VisualBasic.FileIO;
using NPOI.SS.UserModel;
using NPOI.XSSF.UserModel;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net;
using System.Net.Http.Headers;
using System.Runtime.CompilerServices;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using File = System.IO.File;

namespace MedsolPhoneEntry
{
    public class WebScraping : IDisposable
    {
        public string downloadDirectory = string.Empty;
        string dailyActivitySheetName = string.Empty;
        string outputFilePath = string.Empty;
        string currentDateTime = DateTime.Now.ToString("hhmmss");
        public static string? importFilePath = Convert.ToString(ConfigurationManager.AppSettings["ImportFilePath"]);
        public static string? ImportFilePathDatabase = Convert.ToString(ConfigurationManager.AppSettings["ImportFilePathDatabase"]);
        string originalFilePath = Convert.ToString(ConfigurationManager.AppSettings["originalFilePath"]);
        public static string? exportFilePath = Convert.ToString(ConfigurationManager.AppSettings["ExportFilePath"]);
        public static string? errorLogFilePath = Convert.ToString(ConfigurationManager.AppSettings["ErrorLogFilePath"]);
        public static string? exportDirectory = Convert.ToString(ConfigurationManager.AppSettings["exportDirectory"]);
        public static string? filePathDatabase = Convert.ToString(ConfigurationManager.AppSettings["filePathToUploadToDatabase"]);     
        DateTime currentMonthYear = System.DateTime.Now;
        string? getMonthYear = string.Empty;
        string baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
        int rowIndexColumn = 0;
        public void Dispose()
        {
            GC.SuppressFinalize(this);
        }
        public void StartPhoneEntryProcess(string[] args)
        {
            try
            {
                string mAddress = GetIPAddress();
                StartConsoleWriting("Start BOT");
                string filePathexportDirectory = Path.Combine(baseDirectory, exportFilePath);
                getMonthYear = currentMonthYear.ToString("dd-MM-yyyy");

                var pathExportDir = ConfigurationManager.AppSettings["exportDirectory"].ToString();
                var pathImportDir = ConfigurationManager.AppSettings["filePathToUpload"].ToString();
               
                CreateDirectoryIfNotExists(pathExportDir);

                if (importFilePath != null)
                {
                    var importdownloadDirectorypathfile = Path.Combine(baseDirectory, importFilePath);
                    try
                    {
                        var myDataEntryList = GetSortedFileList(importdownloadDirectorypathfile);

                        if (myDataEntryList.Count > 0)
                        {
                            var dailyActivityFile = myDataEntryList.FirstOrDefault(t => t.Name.ToUpper().Contains("Call".ToUpper()) && IsCsvFile(t));
                            // Insert Input Excel into database table 19 July 2024
                            InsertIntoDatabase(dailyActivityFile?.ToString());
                            // Process Ipnut Excel
                            ProcessFiles(myDataEntryList);
                            // File pathfor Database Upload to upload Sharepoint
                            ExampleMethod(filePathDatabase);
                            string filePathimportDirectory = Path.Combine(baseDirectory, importFilePath);
                            string OriginalFileDirectory = Path.Combine(baseDirectory, originalFilePath);
                            CopyFilesFromImportDirectory(filePathimportDirectory);
                          //  DeleteImportFiles(filePathimportDirectory); // Delete all existing files from Import folder after output file generate.
                           }
                        else
                        {
                            LogToErrorFile("File not found in ImportFile Folder.");
                            Console.WriteLine("File not found in ImportFile Folder.");
                        }
                    }
                    catch (Exception ex)
                    {
                        LogToErrorFile(ex.Message);
                        StartConsoleWriting(ex.Message);
                        throw;
                    }
                    finally
                    {
                        Thread.Sleep(2000);
                    }
                }

                StartConsoleWriting("End BOT");

            }
            catch (Exception ex)
            {
                StartConsoleWriting(ex.Message);
                LogToErrorFile(ex.Message);
            }
        }

        [MethodImpl(MethodImplOptions.InternalCall)]
        private static extern void _SuppressFinalize(object o);
        public static void SuppressFinalize(object obj)
        {
            if (obj == null)
                throw new ArgumentNullException(nameof(obj));
            _SuppressFinalize(obj);
        }
        private void DeleteImportFiles(string importDirectory)
        {
            if (System.IO.Directory.Exists(importDirectory))
            {
                DeleteFileIfNeeded(importDirectory); // Delete all existing files from Import folder after output file generate.
            }
        }
        public static bool DeleteFileIfNeeded(string path)
        {
            bool result = true;
            try
            {
                if (System.IO.Directory.Exists(path))
                {
                    try
                    {
                        foreach (string newPath in System.IO.Directory.GetFiles(path, "*.*", System.IO.SearchOption.AllDirectories))
                        {
                            if (!string.IsNullOrEmpty(newPath))
                            {
                                System.IO.File.Delete(newPath);
                            }
                        }
                        LogToErrorFile("Method DeleteFileIfNeeded :- File delete from importfile folder.");
                    }
                    catch (Exception)
                    {
                        result = false;
                    }
                }
                return result;
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
            }
            return result;
        }
        private void ProcessFiles(List<FileInfo> fileList)
        {
            try
            {
                var dailyActivityFile = fileList.FirstOrDefault(t => t.Name.ToUpper().Contains("Call".ToUpper()) && IsCsvFile(t));
                ProcessFile(dailyActivityFile, dailyActivitySheetName, "Daily Activity file not found.");
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
            }
        }
        private void ProcessFile(FileInfo file, string sheetName, string notFoundMessage)
        {
            try
            {
                if (file != null)
                {
                    var fileNameWithoutExtension = Path.GetFileNameWithoutExtension(file.Name);
                    if (fileNameWithoutExtension.Contains("Call"))
                    {
                        dailyActivitySheetName = fileNameWithoutExtension;

                        sheetName = "Call Stats Template";
                    }

                    if (!string.IsNullOrEmpty(sheetName) && sheetName.ToUpper().Contains(sheetName.ToUpper()))
                    {
                        OverwriteCsvWithDataFromDatabase(filePathDatabase);

                    }
                }
                else
                {
                    LogToErrorFile(notFoundMessage);
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
            }
        }
        public void OverwriteCsvWithDataFromDatabase(string csvFilePath)
        {
            try
            {
                var data = FetchDataFromDatabase();

                WriteDataToCsv(csvFilePath, data);
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
                throw;
            }
        }

        private DataTable FetchDataFromDatabase()
        {
            var dataTable = new DataTable();

            using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
            {
                connection.Open();

                string query = @"
            select Date, Agent, TimesheetOwner, TotalTalkingTime, Division 
            from OutputFileDetails
            where BatchId IN (
                select max(BatchId)
                from OutputFileDetails
                group by CAST(CreatedDateTime AS DATE)
            )";

                using (var command = new SqlCommand(query, connection))
                {
                    using (var adapter = new SqlDataAdapter(command))
                    {
                        adapter.Fill(dataTable);
                    }
                }
            }

            return dataTable;
        }
        private void WriteDataToCsv(string csvFilePath, DataTable data)
        {
            using (var writer = new StreamWriter(csvFilePath, false, Encoding.UTF8))
            {
                WriteHeader(writer, data.Columns);

                WriteRows(writer, data);
            }
        }
        private void WriteHeader(StreamWriter writer, DataColumnCollection columns)
        {
            var header = string.Join(",", columns.Cast<DataColumn>().Where(column => column.ColumnName != "Id").Select(column => column.ColumnName));
            writer.WriteLine(header);
        }
        private void WriteRows(StreamWriter writer, DataTable data)
        {
            foreach (DataRow row in data.Rows)
            {
                var rowValues = row.ItemArray
                    .Where((field, index) => data.Columns[index].ColumnName != "Id")
                    .Select(field =>
                    {
                        if (field is DateTime dateTime)
                        {
                            return dateTime.ToString("dd-MM-yyyy");
                        }
                        return field.ToString();
                    });

                var rowString = string.Join(",", rowValues);
                writer.WriteLine(rowString);
            }
        }
        public async Task ExampleMethod(string filePath)
        {
            try
            {
                string tenantId = "6211af6a-7b73-4c38-9c98-d1c2f85da093"; // Tenant ID
                string clientId = "57876615-02e7-491c-9fd0-419a9a690a80"; // Client ID
                string clientSecret = ""; // Client Secret
                string driveId = "b!2L0fIMt9J0mMDW_fuKB89Pngg3dAgy5Lidag8_qKydAJ4JeNq0iRQLtD8qa7lOud"; // Drive ID
            //    string targetFolderPath = "/QXTest"; // Target folder path on SharePoint
              //  string targetFolderPath = "/PhoneBOT"; // Target folder path on SharePoint
                string targetFolderPath = "/QXTestPhoneBOT"; // Target folder path on SharePoint

                var clientApp = ConfidentialClientApplicationBuilder.Create(clientId)
                    .WithClientSecret(clientSecret)
                    .WithAuthority(new Uri($"https://login.microsoftonline.com/{tenantId}"))
                    .Build();

                var authResult = await clientApp.AcquireTokenForClient(new[] { "https://graph.microsoft.com/.default" }).ExecuteAsync();

                var graphClient = new GraphServiceClient(new DelegateAuthenticationProvider(
                    (requestMessage) =>
                    {
                        requestMessage.Headers.Authorization = new AuthenticationHeaderValue("Bearer", authResult.AccessToken);
                        return Task.CompletedTask;
                    }));

                using (var fileStream = new FileStream(filePath, FileMode.Open))
                {

                    var driveItem = await graphClient.Drives[driveId]
                        .Root
                        .ItemWithPath($"{targetFolderPath}/{Path.GetFileName(filePath)}")
                        .Content
                        .Request()
                        .PutAsync<DriveItem>(fileStream);

                    LogToErrorFile($"File {driveItem.Name} uploaded successfully to {targetFolderPath}.");
                }
            }
            catch (ServiceException ex)
            {
                Console.WriteLine($"Error uploading file to SharePoint: {ex.Message}");
            }
        }

        private void InsertIntoDatabase(string csvFilePath)
        {
            try
            {
                if (!File.Exists(csvFilePath))
                {
                    LogToErrorFile($"File not found: {csvFilePath}");
                    return;
                }

                using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
                {
                    connection.Open();

                    int batchId = GenerateNewBatchId(connection);

                    string insertQuery = @"
                INSERT INTO OutputFileDetails (Date, Agent, TimesheetOwner, TotalTalkingTime, Division, CreatedDateTime, BatchId)
                VALUES (@Date, @Agent, @TimesheetOwner, @TotalTalkingTime, @Division, @CreatedDateTime, @BatchId)";

                    using (var insertCommand = new SqlCommand(insertQuery, connection))
                    {
                        using (var reader = new StreamReader(csvFilePath))
                        {
                            for (int i = 0; i < 6; i++)
                            {
                                reader.ReadLine();
                            }

                            reader.ReadLine();

                            while (!reader.EndOfStream)
                            {
                                var line = reader.ReadLine();
                                var values = line.Split(',');

                                if (values.Length < 8)
                                {
                                    LogToErrorFile($"Skipping line due to insufficient values: {line}");
                                    continue;
                                }

                                var agentExtensionWithOwner = values[0].Trim('"');
                                var timesheetOwner = values[1].Trim('"');
                                var len = values.Length;
                                var totalTalkingTime = values[len - 1].Trim();

                                var parts = agentExtensionWithOwner.Split(' ', 2);

                                if (parts.Length < 2)
                                {
                                    LogToErrorFile($"Skipping line due to invalid agentExtensionWithOwner format: {line}");
                                    continue;
                                }

                                var agentExtension = parts[0].Trim();
                                var divisionValue = parts[1].Trim('"');

                                if (!string.IsNullOrEmpty(agentExtension))
                                {
                                    insertCommand.Parameters.Clear();
                                    insertCommand.Parameters.AddWithValue("@Date", DateTime.Today);
                                    insertCommand.Parameters.AddWithValue("@Agent", agentExtension);
                                    insertCommand.Parameters.AddWithValue("@TimesheetOwner", timesheetOwner);
                                    insertCommand.Parameters.AddWithValue("@TotalTalkingTime", totalTalkingTime);
                                    insertCommand.Parameters.AddWithValue("@Division", divisionValue);
                                    insertCommand.Parameters.AddWithValue("@CreatedDateTime", DateTime.Now);
                                    insertCommand.Parameters.AddWithValue("@BatchId", batchId);

                                    insertCommand.ExecuteNonQuery();
                                }
                                else
                                {
                                    LogToErrorFile($"Skipping line due to empty agentExtension or timesheetOwner: {line}");
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile($"General Exception: {ex.Message}");
                StartConsoleWriting(ex.Message);
            }
        }

        private int GenerateNewBatchId(SqlConnection connection)
        {
            string query = "SELECT ISNULL(MAX(BatchId), 0) + 1 FROM OutputFileDetails";
            using (var command = new SqlCommand(query, connection))
            {
                return (int)command.ExecuteScalar();
            }
        }
        
        public void LoadDailyPatientSiteCsvData(string filePath, ISheet sheet, XSSFWorkbook workbook, string sheetName)
        {
            try
            {
                XSSFCellStyle numberStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                numberStyle.DataFormat = workbook.CreateDataFormat().GetFormat("General");

                XSSFCellStyle dateStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                dateStyle.DataFormat = workbook.CreateDataFormat().GetFormat("dd-MM-yyyy");

                XSSFCellStyle timeStyle = (XSSFCellStyle)workbook.CreateCellStyle();
                timeStyle.DataFormat = workbook.CreateDataFormat().GetFormat("hh:mm:ss");

                using (TextFieldParser reader = new TextFieldParser(filePath))
                {
                    reader.HasFieldsEnclosedInQuotes = true;
                    reader.SetDelimiters("\t");

                    int rowIndex = 0;

                    while (!reader.EndOfData)
                    {
                        var valueLines = reader.ReadFields();
                        if (rowIndex == 0)
                        {
                            CreateHeaderRow(sheet, numberStyle);
                            rowIndex++;
                        }
                        else if (int.TryParse(valueLines[0].Split(' ')[0], out _)) // Check if the first part is numeric
                        {
                            ProcessDataRows(sheet, rowIndex, valueLines, dateStyle, numberStyle, timeStyle);
                            rowIndex++;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogToErrorFile(ex.Message);
                StartConsoleWriting(ex.Message);
                throw;
            }
        }
       
       
        
    }
	
we have already data of 9749 rows in export file and sharepoint file have that i don't want update and will remain same 
and every time bot will execute data will insert into database table and will create excel file and upload in sharepoint
that will insert below 9749 rows record.
