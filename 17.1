Inputfolder and Outputfolder will be create in same folder where our .exe file exist. 
it can be shared folder or local in local file explorer folder.
remaining process will same as existing.

CODE -

using System;
using System.IO;
using System.Linq;
using iText.Kernel.Pdf;
using iText.Kernel.Utils;
using System.Text.RegularExpressions;
using iText.Kernel.Pdf.Canvas.Parser;

namespace PDFSplit
{
    public class FileProcessor
    {
        public void ProcessFiles()
        {
            string downloadsFolder = Environment.GetFolderPath(Environment.SpecialFolder.UserProfile) + @"\Downloads";
            string inputFolder = Path.Combine(downloadsFolder, "Inputfolder");
            string outputFolder = Path.Combine(downloadsFolder, "Outputfolder");

            EnsureFolderExists(inputFolder);
            EnsureFolderExists(outputFolder);

            var files = Directory.GetFiles(inputFolder);
            foreach (var file in files)
            {
               // Console.WriteLine($"Processing file: {file}");
                ProcessFile(file, outputFolder);
            }

         //   Console.WriteLine("Processing completed.");
        }

        private void EnsureFolderExists(string folderPath)
        {
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
                // Console.WriteLine($"Created folder: {folderPath}");
            }
            else
            {
              //  Console.WriteLine($"Folder already exists: {folderPath}");
            }
        }

        private void ProcessFile(string filePath, string outputFolder)
        {
            try
            {
                using (PdfReader reader = new PdfReader(filePath))
                {
                    using (PdfDocument pdfDoc = new PdfDocument(reader))
                    {
                        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
                        {
                            string tempFilePath = Path.Combine(outputFolder, $"tempPage_{i}.pdf");
                            using (PdfWriter writer = new PdfWriter(tempFilePath))
                            {
                                using (PdfDocument singlePagePdf = new PdfDocument(writer))
                                {
                                    pdfDoc.CopyPagesTo(i, i, singlePagePdf);
                                }
                            }

                            string invoiceNo = ExtractInvoiceNumber(tempFilePath);
                            if (!string.IsNullOrEmpty(invoiceNo))
                            {
                                string baseFileName = Path.Combine(outputFolder, $"{invoiceNo}.pdf");

                                string uniqueFileName = baseFileName;

                                int counter = 1;
                                if (File.Exists(uniqueFileName))
                                {
                                    uniqueFileName = Path.Combine(outputFolder, $"{invoiceNo}_{counter}.pdf");

                                    while (File.Exists(uniqueFileName))
                                    {
                                        counter++;
                                        uniqueFileName = Path.Combine(outputFolder, $"{invoiceNo}_{counter}.pdf");
                                    }
                                }

                                File.Move(tempFilePath, uniqueFileName);
                            //    Console.WriteLine($"File saved as: {uniqueFileName}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
             //   Console.WriteLine($"Error processing file {filePath}: {ex.Message}");
            }
        }

        private string ExtractInvoiceNumber(string filePath)
        {
            using (PdfReader reader = new PdfReader(filePath))
            {
                using (PdfDocument pdfDoc = new PdfDocument(reader))
                {
                    string text = PdfTextExtractor.GetTextFromPage(pdfDoc.GetFirstPage());
                                        
                    Regex regex = new Regex(@"Invoice No:\s*(\d+)");
                    Match match = regex.Match(text);
                    if (match.Success)
                    {
                        return match.Groups[1].Value;
                    }
                }
            }
            return null;
        }
               
    }
}
