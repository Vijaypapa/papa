1. create a new folder OriginalFileForlder and after when we get outfile or after execution move files from inputFolder to OriginalFileForlder.
2. there we have to read .xlsx excel file with name Inputinvoice file from inputFolder in which there is only one column with name is Invoiceno
there a n mumber of invoice number are written under that column name
3. remaining process will same but we have to create a zip file there with name of BBK invoices â€“ Current Date
here Current Date will dynamic value like date for bot is execting.
4. in this zip file we have to put individual output split pdf file that invoice number is mentioned in that Inputinvoice.xlsx file.
5. remaining process will reamin same.

using System;
using System.IO;
using System.Linq;
using iText.Kernel.Pdf;
using iText.Kernel.Utils;
using System.Text.RegularExpressions;
using iText.Kernel.Pdf.Canvas.Parser;
using System.Reflection;

namespace PDFSplit
{
    public class FileProcessor
    {
        public void ProcessFiles()
        {
           string exeDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);

            string inputFolder = Path.Combine(exeDirectory, "Inputfolder");
            string outputFolder = Path.Combine(exeDirectory, "Outputfolder");

            EnsureFolderExists(inputFolder);
            EnsureFolderExists(outputFolder);

            var files = Directory.GetFiles(inputFolder);
            foreach (var file in files)
            {
                ProcessFile(file, outputFolder);
            }

            // Console.WriteLine("Processing completed.");
        }

        private void EnsureFolderExists(string folderPath)
        {
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
                // Console.WriteLine($"Created folder: {folderPath}");
            }
            else
            {
                //  Console.WriteLine($"Folder already exists: {folderPath}");
            }
        }

        private void ProcessFile(string filePath, string outputFolder)
        {
            try
            {
                using (PdfReader reader = new PdfReader(filePath))
                {
                    using (PdfDocument pdfDoc = new PdfDocument(reader))
                    {
                        for (int i = 1; i <= pdfDoc.GetNumberOfPages(); i++)
                        {
                            string tempFilePath = Path.Combine(outputFolder, $"tempPage_{i}.pdf");
                            using (PdfWriter writer = new PdfWriter(tempFilePath))
                            {
                                using (PdfDocument singlePagePdf = new PdfDocument(writer))
                                {
                                    pdfDoc.CopyPagesTo(i, i, singlePagePdf);
                                }
                            }

                            string invoiceNo = ExtractInvoiceNumber(tempFilePath);
                            if (!string.IsNullOrEmpty(invoiceNo))
                            {
                                string baseFileName = Path.Combine(outputFolder, $"{invoiceNo}.pdf");

                                string uniqueFileName = baseFileName;

                                int counter = 1;
                                if (File.Exists(uniqueFileName))
                                {
                                    uniqueFileName = Path.Combine(outputFolder, $"{invoiceNo}_{counter}.pdf");

                                    while (File.Exists(uniqueFileName))
                                    {
                                        counter++;
                                        uniqueFileName = Path.Combine(outputFolder, $"{invoiceNo}_{counter}.pdf");
                                    }
                                }

                                File.Move(tempFilePath, uniqueFileName);
                                //   Console.WriteLine($"File saved as: {uniqueFileName}");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                //  Console.WriteLine($"Error processing file {filePath}: {ex.Message}");
            }
        }

        private string ExtractInvoiceNumber(string filePath)
        {
            using (PdfReader reader = new PdfReader(filePath))
            {
                using (PdfDocument pdfDoc = new PdfDocument(reader))
                {
                    string text = PdfTextExtractor.GetTextFromPage(pdfDoc.GetFirstPage());

                    Regex regex = new Regex(@"Invoice No:\s*(\d+)");
                    Match match = regex.Match(text);
                    if (match.Success)
                    {
                        return match.Groups[1].Value;
                    }
                }
            }
            return null;
        }
    }
}
