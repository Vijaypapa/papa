To ensure that only records with the maximum `BatchId` for each day are retained across all existing records in the table, you can extend the deletion logic to handle records for all dates, not just for the current day. This means you'll delete any records with a lower `BatchId` for every day where multiple batch IDs exist, while keeping only the records for the highest batch ID of each day.

You can modify the delete query to check for each day and delete any records where the `BatchId` is not the maximum for that day.

Hereâ€™s how you can modify the logic:

```csharp
private void InsertIntoDatabase(string csvFilePath)
{
    try
    {
        if (!File.Exists(csvFilePath))
        {
            LogToErrorFile($"File not found: {csvFilePath}");
            return;
        }

        using (var connection = new SqlConnection(ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString))
        {
            connection.Open();

            int batchId = GenerateNewBatchId(connection);

            string insertQuery = @"
            INSERT INTO OutputFileDetails (Date, Agent, TimesheetOwner, TotalTalkingTime, Division, CreatedDateTime, BatchId)
            VALUES (@Date, @Agent, @TimesheetOwner, @TotalTalkingTime, @Division, @CreatedDateTime, @BatchId)";

            using (var insertCommand = new SqlCommand(insertQuery, connection))
            {
                using (var reader = new StreamReader(csvFilePath))
                {
                    for (int i = 0; i < 6; i++)
                    {
                        reader.ReadLine();
                    }

                    reader.ReadLine();

                    while (!reader.EndOfStream)
                    {
                        var line = reader.ReadLine();
                        var values = line.Split(',');

                        if (values.Length < 8)
                        {
                            LogToErrorFile($"Skipping line due to insufficient values: {line}");
                            continue;
                        }

                        var agentExtensionWithOwner = values[0].Trim('"');
                        var timesheetOwner = values[1].Trim('"');
                        var len = values.Length;
                        var totalTalkingTime = values[len - 1].Trim();

                        var parts = agentExtensionWithOwner.Split(' ', 2);

                        if (parts.Length < 2)
                        {
                            LogToErrorFile($"Skipping line due to invalid agentExtensionWithOwner format: {line}");
                            continue;
                        }

                        var agentExtension = parts[0].Trim();
                        var divisionValue = parts[1].Trim('"');

                        if (!string.IsNullOrEmpty(agentExtension))
                        {
                            insertCommand.Parameters.Clear();
                            insertCommand.Parameters.AddWithValue("@Date", DateTime.Today);
                            insertCommand.Parameters.AddWithValue("@Agent", agentExtension);
                            insertCommand.Parameters.AddWithValue("@TimesheetOwner", timesheetOwner);
                            insertCommand.Parameters.AddWithValue("@TotalTalkingTime", totalTalkingTime);
                            insertCommand.Parameters.AddWithValue("@Division", divisionValue);
                            insertCommand.Parameters.AddWithValue("@CreatedDateTime", DateTime.Now);
                            insertCommand.Parameters.AddWithValue("@BatchId", batchId);

                            insertCommand.ExecuteNonQuery();
                        }
                        else
                        {
                            LogToErrorFile($"Skipping line due to empty agentExtension or timesheetOwner: {line}");
                        }
                    }
                }
            }

            // Delete older data for all days with lower BatchId
            string deleteQuery = @"
                DELETE FROM OutputFileDetails
                WHERE BatchId < (
                    SELECT MAX(BatchId) 
                    FROM OutputFileDetails AS innerTable 
                    WHERE CAST(innerTable.CreatedDateTime AS DATE) = CAST(OutputFileDetails.CreatedDateTime AS DATE)
                )";

            using (var deleteCommand = new SqlCommand(deleteQuery, connection))
            {
                deleteCommand.ExecuteNonQuery();
            }
        }
    }
    catch (Exception ex)
    {
        LogToErrorFile($"General Exception: {ex.Message}");
        StartConsoleWriting(ex.Message);
    }
}
```

### Key Changes:
1. **Delete Query Logic:**
   - The `deleteQuery` ensures that for each day in the `OutputFileDetails` table, it deletes any records where the `BatchId` is less than the maximum `BatchId` for that day.
   - The `MAX(BatchId)` subquery checks for the maximum batch ID per day using `CAST(CreatedDateTime AS DATE)` to group the records by day and retain only the highest batch ID.

### Outcome:
- This ensures that you delete all records for each day where the `BatchId` is less than the maximum batch ID, effectively keeping only the latest batch of records per day, while clearing out older batch records. This applies to the entire table, not just the current day's records.