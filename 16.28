It looks like the `Outstanding` column is not available in the `CTE_Final` CTE due to the column not being included in the final selection. The error occurs because `Outstanding` was defined in the `CTE_Cumulative` CTE but wasn't included in `CTE_Final`. We need to make sure that all necessary columns, including `Outstanding`, are carried through to the final query.

Let's revise the query to ensure that `Outstanding` is properly included:

```sql
WITH CTE AS (
    SELECT   
        ISNULL(po.PurchaseOrderNo, '') AS PurchaseOrderNo,    
        ISNULL(podetailgroup.NominalCode, '') AS NominalCode,    
        podetailgroup.TotalPO AS TotalPOAmount,    
        ISNULL(SIDetail.SITotalAmount, 0) + ISNULL(SIDetail.Delivery, 0) AS InvoiceAmount,  
        SI.StatusId AS SIStatus,    
        SI.InvoiceCreateDate AS SICreatedDate,    
        po.CreatedDate,
        
        -- Calculate the row number for ordering within each PurchaseOrderNo and NominalCode
        ROW_NUMBER() OVER (PARTITION BY po.PurchaseOrderNo, podetailgroup.NominalCode ORDER BY SI.InvoiceCreateDate) AS RowNumber,

        -- Calculate the cumulative sum of InvoiceAmount
        SUM(ISNULL(SIDetail.SITotalAmount, 0) + ISNULL(SIDetail.Delivery, 0)) OVER (
            PARTITION BY po.PurchaseOrderNo, podetailgroup.NominalCode 
            ORDER BY SI.InvoiceCreateDate 
            ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
        ) AS CumulativeInvoiceAmount,

        -- Get the TotalPOAmount for later calculations
        podetailgroup.TotalPO AS BaseOutstanding
    FROM dbo.PurchaseOrders AS po WITH (NOLOCK)    
    INNER JOIN dbo.Suppliers AS supplier WITH (NOLOCK) ON supplier.SupplierId = po.SupplierId    
    LEFT OUTER JOIN dbo.SupplierInvoices AS SI WITH (NOLOCK) ON SI.PurchaseOrderId = po.PurchaseOrderId    
    INNER JOIN (    
        SELECT podetail.PurchaseOrderId AS PurchaseOrderId,    
               podetail.NominalCodeId AS NominalCodeId,    
               ncode.NominalCode NominalCode,    
               SUM(podetail.Total + ISNULL(podetail.Delivery, 0)) AS TotalPO    
        FROM PurchaseOrdersDetails podetail    
        INNER JOIN NominalCodes ncode ON ncode.NominalCodeId = podetail.NominalCodeId    
        GROUP BY podetail.PurchaseOrderId, podetail.NominalCodeId, ncode.NominalCode    
    ) podetailgroup ON podetailgroup.PurchaseOrderId = po.PurchaseOrderId    
    LEFT OUTER JOIN dbo.SupplierInvoiceDetails AS SIDetail WITH (NOLOCK) 
        ON podetailgroup.NominalCodeId = SIDetail.NominalCodeId    
        AND SI.SupplierInvoiceId = SIDetail.SupplierInvoiceId    
    WHERE po.PurchaseOrderNo IN ('A001/2023/2244', 'A016/2023/662')
    AND NominalCode IN ('50250', '71030')
)

, CTE_Cumulative AS (
    SELECT
        PurchaseOrderNo,
        NominalCode,
        TotalPOAmount,
        InvoiceAmount,
        SIStatus,
        SICreatedDate,
        CreatedDate,
        -- Calculate cumulative Outstanding amount
        CASE 
            -- If Status is 3, set Outstanding to TotalPOAmount
            WHEN SIStatus = 3 THEN TotalPOAmount

            -- If Status is 4, calculate cumulative Outstanding value
            WHEN SIStatus = 4 THEN 
                BaseOutstanding - 
                CumulativeInvoiceAmount

            -- Default case if neither 3 nor 4
            ELSE TotalPOAmount 
        END AS Outstanding
    FROM CTE
)

-- Final calculation to adjust Outstanding for the first occurrence of SIStatus = 4
, CTE_Final AS (
    SELECT 
        PurchaseOrderNo,
        NominalCode,
        TotalPOAmount,
        InvoiceAmount,
        SIStatus,
        SICreatedDate,
        CreatedDate,
        Outstanding,
        -- Identify the first occurrence of SIStatus = 4
        ROW_NUMBER() OVER (PARTITION BY PurchaseOrderNo, NominalCode ORDER BY SICreatedDate) AS RowNum
    FROM CTE_Cumulative
)

SELECT 
    PurchaseOrderNo,
    NominalCode,
    TotalPOAmount,
    InvoiceAmount,

    CASE
        -- For SIStatus = 4, set Outstanding to TotalPOAmount - InvoiceAmount for the first row only
        WHEN SIStatus = 4 AND RowNum = 1 THEN TotalPOAmount - InvoiceAmount
        
        -- For SIStatus = 4, if Outstanding equals InvoiceAmount, set Outstanding to 0
        WHEN SIStatus = 4 AND Outstanding = InvoiceAmount THEN 0
        
        -- For SIStatus = 4, if Outstanding is less than 0, use the Outstanding value
        WHEN SIStatus = 4 AND Outstanding < 0 THEN Outstanding
        
        -- Otherwise, use the calculated Outstanding
        ELSE Outstanding
    END AS Outstanding,

    SIStatus,    
    SICreatedDate,    
    CreatedDate
FROM CTE_Final
ORDER BY PurchaseOrderNo, SIStatus, SICreatedDate;
```

### Changes:
1. **Added `Outstanding` to `CTE_Final`:** Ensures that `Outstanding` is available for the final SELECT.
2. **Adjusted the final SELECT statement:** Ensures that `Outstanding` is calculated according to the updated logic.